一年工作经验跳槽字节跳动社招经历分享
https://www.nowcoder.com/discuss/336659

作者：oscarwin
链接：https://www.nowcoder.com/discuss/336659
来源：牛客网

Shopee
一面
mysql 有那些存储引擎，有哪些区别
    https://blog.csdn.net/Java_fenxiang/article/details/82870335
    myisam
        不支持事务
        使用表级锁，并发性差
        主机宕机后，MyISAM表易损坏，灾难恢复性不佳
        可以配合锁，实现操作系统下的复制备份、迁移
        只缓存索引，数据的缓存是利用操作系统缓冲区来实现的。可能引发过多的系统调用且效率不佳
        数据紧凑存储，因此可获得更小的索引和更快的全表扫描性能

    innodb
        灾难恢复性好
        支持事务
        使用行级锁
        支持外键关联
        支持热备份
        对于InnoDB引擎中的表，其数据的物理组织形式是簇表（Cluster Table），主键索引和数据是在一起的，数据按主键的顺序物理分布
        实现了缓冲管理，不仅能缓冲索引也能缓冲数据，并且会自动创建散列索引以加快数据的获取

    memory
        提供内存表，也不支持事务和外键。显著提高访问数据的速度，可用于缓存会频繁访问的、可以重构的数据、计算结果、统计值、中间结果。

    innodb和myisam的区别：
        1）InnoDB支持事务，MyISAM不支持，这一点是非常之重要。事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而MyISAM就不可以了。
        2）MyISAM适合查询以及插入为主的应用，InnoDB适合频繁修改以及涉及到安全性较高的应用
        3）InnoDB支持外键，MyISAM不支持
        4）从MySQL5.5.5以后，InnoDB是默认引擎
        5）InnoDB不支持FULLTEXT类型的索引
        6）InnoDB中不保存表的行数，如select count(*) from table时，InnoDB需要扫描一遍整个表来计算有多少行，
            但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(*)语句包含where条件时MyISAM也需要扫描整个表。
        7）对于自增长的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中可以和其他字段一起建立联合索引。
        8）清空整个表时，InnoDB是一行一行的删除，效率非常慢。MyISAM则会重建表。
        9）InnoDB支持行锁（某些情况下还是锁整表，如 update table set a=1 where user like '%lee%'
        有人说MYISAM只能用于小型应用，其实这只是一种偏见。
        如果数据量比较大，这是需要通过升级架构来解决，比如分表分库，读写分离，而不是单纯地依赖存储引擎。
        现在一般都是选用InnoDB了，主要是MyISAM的全表锁，读写串行问题，并发效率锁表，效率低，MyISAM对于读写密集型应用一般是不会去选用的。


mysql 索引在什么情况下会失效
    like是以%开头的查询语句
        在使用LIKE关键字进行查询的语句中，如果匹配字符串的第一个字符为“%”，索引不会起作用。只有“%”不再第一个位置，索引才会起作用。
    使用多列索引的查询语句
        mysql可以为多个字段创建索引。一个索引可以包括16个字段。对于多列索引，只有查询条件中使用了这些字段中第1个字段时，索引才会被使用。
    使用OR关键字查询语句
        查询语句的查询条件中只有OR关键字，且OR前后的两个条件中列都是索引时，查询中才会使用索引。否则，查询将不使用索引。
    如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引；
    other
        查询的数量是大表的大部分，应该是30％以上。
        查询条件使用函数在索引列上，或者对索引列进行运算，运算包括(+，-，*，/，! 等)
            错误的例子：select * from test where id-1=9;
            正确的例子：select * from test where id=10;
        隐式转换导致索引失效
        单独引用复合索引里非第一位置的索引列.
        not in ,not exist
        当变量采用的是times变量，而表的字段采用的是date变量时.或相反情况。
        B-tree索引 is null不会走,is not null会走,位图索引 is null,is not null 都会走


innodb 与myisam 的区别？

mysql 的索引模型
    https://www.liangzl.com/get-article-detail-162914.html

    哈希表
        数组加链表实现，添加新数据较快，但是由于不是有序的，所以区间查询速度是很慢的。
        哈希表适用于只有等值查询的场景，比如Memcached及其他NOSQL引擎。
    有序数组
        有序数组是讲索引字段有序的存放在数组中，所以在等值查询和范围查询场景中的性能就都非常优秀。
        但是有序数组在插入更新时就比较麻烦，需要移动后面所有记录，成本太高；所以有序数组索引只适用于静态存储引擎。
    二叉搜索树
        二叉树的查询和更新复杂度均为O(log(N))；假如一棵 100 万节点的平衡二叉树，树高 20，一次查询可能需要访问 20 个数据块。
        所以大多数数据存储引擎采用N叉树

    MyISAM中的索引
        B+Tree叶节点的data域存放的是数据记录的地址。     非聚簇索引
    InnoDB中的索引
        主键索引也被称为聚簇索引
        非主键索引也被称为二级索引
    覆盖索引
        SQL只需要通过索引就可以返回查询所需要的数据，而不必通过二级索引查到主键之后再去查询数据。
    最左前缀原则
    索引下推

B树和B+树的区别
    https://www.cnblogs.com/xueqiuqiu/articles/8779029.html

    关键字的数量不同；
        B+树中分支结点有m个关键字，其叶子结点也有m个，其关键字只是起到了一个索引的作用，但是B树虽然也有m个子结点，但是其只拥有m-1个关键字。
    存储的位置不同；
        B+树中的数据都存储在叶子结点上，也就是其所有叶子结点的数据组合起来就是完整的数据，但是B树的数据存储在每一个结点中，并不仅仅存储在叶子结点上。
    分支结点的构造不同；
        B+树的分支结点仅仅存储着关键字信息和儿子的指针（这里的指针指的是磁盘块的偏移量），也就是说内部结点仅仅包含着索引信息。
        B树节点存储了关键字对应记录的指针，而B+树存储在叶子节点
    查询不同；
        B树在找到具体的数值以后，则结束，而B+树则需要通过索引找到叶子结点中的数据才结束，也就是说B+树的搜索过程中走了一条从根结点到叶子结点的路径。


mysql 主从同步怎么搞的？分哪几个过程？如果有一台新机器要加到从机里，怎么个过程。
    主从同步怎么搞的
        https://blog.csdn.net/weixin_38576764/article/details/80279070
        第一步
            先配置 主服务器
            修改 my.cnf文件，之后重启mysql
                server-id, sync_binlog, expire_logs_days, max_binlog_size
            同样的，进入从服务器，配置从服务器的my.cnf, 注意更换server-id即可。
        第二步
            在主服务器上添加用于同步的账户
        第三步
            查看主服务器BIN日志的信息
        第四步
            设置从服务器
            进入从服务器mysql
            先在从服务器配置完成，启动从服务器：  stop slave , start slave
        第五步
            查看配置是否成功  show slave status
        第六步
            测试 在主数据库中 插入数据，从数据库更新。

    如果有一台新机器要加到从机里，怎么个过程?
        https://blog.51cto.com/ljohn/2173091
        1、主库创建账号：
        2、从库配置
        3、备份主库
        4、从库创建数据库，并导入数据
        5、查看备份文件的binlog 和 pos值
        6、启动从库

mysql主从同步原理
    主服务器(master) 接受用户的内容更新，并写入bin-log中
    一个或多个从服务器(slave) ，接受来自 主服务器的 binlog 日志文件(I/O 线程)， 解析出sql(sql 线程),
        其中I/O线程是读取主库传来的binlog内容并写到 relay log
        SQL线程会读取relay-log日志的内容，从Master_log_pos位置开始执行读取更新的事件，将更新的内容写入到slave的db库里
    重新更新到服务器(slave),完成数据的一致(sql 线程)


mysql主从复制延迟解决
    https://www.cnblogs.com/phpper/p/8904169.html
    1. 主库宕机后，数据可能丢失；
    2. 主从同步延迟。

    常见原因：Master负载过高、Slave负载过高、网络延迟、机器性能太低、MySQL配置不合理。

        通过监控 show slave status 命令输出的Seconds_Behind_Master参数的值来判断：
        NULL，表示io_thread或是sql_thread有任何一个发生故障；
        0，该值为零，表示主从复制良好；
        正值，表示主从已经出现延时，数字越大表示从库延迟越严重。

        1. 半同步复制
            等待至少一个从库接收到并写到relay log中才返回结果给客户端
        2. 主库配置sync_binlog=1，innodb_flush_log_at_trx_commit=1
            sync_binlog的默认值是0，MySQL不会将binlog同步到磁盘，其值表示每写多少binlog同步一次磁盘。
            innodb_flush_log_at_trx_commit为1表示每一次事务提交或事务外的指令都需要把日志flush到磁盘。

        解决从库复制延迟的问题：
        1. 优化网络
        2. 升级Slave硬件配置
        3. Slave调整参数，关闭binlog，修改innodb_flush_log_at_trx_commit参数值
        4. 升级MySQL版本到5.7，使用并行复制


乐观锁与悲观锁的区别？


binlog 日志是 master 推的还是 salve 来拉的？
    slave来拉的 pull


redis 持久化有哪几种方式，怎么选？
    https://blog.csdn.net/chang384915878/article/details/86749117
    缓存雪崩问题：大量的请求过来，缓存全部无法命中，在 redis 里根本找不到数据

    RDB：RDB 持久化机制，是对 redis 中的数据执行周期性的持久化。
    AOF：AOF 机制对每条写入命令作为日志，以 append-only 的模式写入一个日志文件中，
        在 redis 重启的时候，可以通过回放 AOF 日志中的写入指令来重新构建整个数据集。

    比较：
        性能，读写的影响，qps
        故障恢复
        丢失数据
        备份时间，5min - 1s
        日志文件大小，rewrite（merge）
        机制bug问题


redis 主从同步是怎样的过程？
    https://blog.csdn.net/qq_41724691/article/details/86616266
    《redis设计与实现》

    初次全量同步
    命令传播
    重新复制
        部分同步
            服务器运行ID
            复制偏移量
            复制积压缓冲区
        完全同步
            从发送psync
            主执行bgsave生产rgb快照
            主发送rgb快照
            从载入rgb快照
            主发送写命令
            从执行写命令


redis 的 zset 怎么实现的？
    https://www.jianshu.com/p/cc379427ef9d

    skiplist编码的有序集合底层是一个命名为zset的结构体，而一个zset结构同时包含一个字典和一个跳跃表。
    跳跃表按score从小到大保存所有集合元素。
    而字典则保存着从member到score的映射，这样就可以用O(1)的复杂度来查找member对应的score值。
    虽然同时使用两种结构，但它们会通过指针来共享相同元素的member和score，因此不会浪费额外的内存。


redis key 的过期策略
    https://stor.51cto.com/art/201911/606478.htm
    Redis 内存过期策略
        volatile-lru: 在所有带有过期时间的 key 中使用 LRU 算法淘汰数据;
        alkeys-lru: 在所有的 key 中使用最近最少被使用 LRU 算法淘汰数据，保证新加入的数据正常;
        volatile-random: 在所有带有过期时间的 key 中随机淘汰数据;
        allkeys-random: 在所有的 key 中随机淘汰数据;
        volatile-ttl: 在所有带有过期时间的 key 中，淘汰最早会过期的数据;
        noeviction: 不回收，当达到最大内存的时候，在增加新数据的时候会返回 error，不会清除旧数据，这是 Redis 的默认策略;

        volatile-lru, volatile-random, volatile-ttl 这几种情况在 Redis 中没有带有过期 Key 的时候跟 noeviction 策略是一样的。
        淘汰策略是可以动态调整的，调整的时候是不需要重启的

        策略的执行过程
            客户端运行命令，添加数据申请内存;
            Redis 会检查内存的使用情况，如果已经超过的最大限制，就是根据配置的内存淘汰策略去淘汰相应的 key，从而保证新数据正常添加;
            继续执行命令。

    Key 的过期策略
        set name ziyouu ex 100

        定时策略：
            对于如何清除过期的 key 通常我们很自然的可以想到就是我们可以给每个 key 加一个定时器，这样当时间到达过期时间的时候就自动删除 key
            对内存友好，对cpu不友好
        惰性策略
            有主动也有被动，我们可以不用定时器，而是在每次访问一个 key 的时候再去判断这个 key 是否到达过期时间了，过期了就删除掉。
        折中的方式
            Redis 会在有过期时间的 Key 集合中随机 20 个出来，删掉已经过期的 Key，如果比例超过 25%，再重新执行操作。
            每秒中会执行 10 个这样的操作。


hashmap 是怎样实现的？
    初始容量：16
    加载因子：0.75
    扩容容量：2倍
    底层数据结构：数组，存储链表（链表， 大于8之后变为红黑树）
    put流程
        1. 判断map长度，若为0，则resize
        2. 长度不为0，判断hash值下标对应项是否为空，若为空，直接新建node插入
        3. 若不为空，首先判断第一个node的key是否与插入的key相等，若相等，则直接替换val
        4. 若不相等，则判断第一个node是否是红黑树，若是，则遍历红黑树并插入节点
        5. 若不是，则遍历链表插入红黑树，并判断长度是否达到8，若达到，则链表转化为红黑树
        6. 判断map长度是否大于设置的阈值（0.75*size），则resize

    get流程
        1. 判断map长度，若为0，则直接返回null
        2. 若长度不为0，则判断hash值下标对应项是否为空，为空返回null
        3. 若不为空，判断首节点key是否相等，若相等，返回val
        4. 若不相等，判断下一个节点是否是红黑树，若是，遍历红黑树
        5. 若不是，遍历链表，找到key则返回val
        6. 找不到返回null

    线程不安全原因：
        size没有使用volatile修饰
        java7不安全发生在扩容，头插法，
            当并发执行扩容操作时会造成环形链和数据丢失的情况。
        java8尾插法，put操作出现数据覆盖
            在并发执行put操作时会发生数据覆盖的情况。


tcp 的握手与挥手

select 和 epoll的区别

http与https的区别，加密怎么加的？


raft算法
    选举
        双花
            随机选举时间
            任期号
    日志同步
        不允许日志空洞

zk选主算法：Zab
    服务器id
    数据id
    任期id
        机器有无状态
            无状态：节点id最小或最大的单选
            有状态：根据状态值来选


Kafka 选主怎么做的？
    https://blog.csdn.net/lixiang987654321/article/details/99674419
    最简单的方式
        由于kafka集群依赖zookeeper集群，所以最简单直观的方案是：
            所有的follower都在zookeeper上设置一个watch，一旦leader宕机，其对应的ephemeral znode（临时节点）会自动删除，
            此时所有follower都尝试创建该节点，而创建成功者（zookeeper保证只有一个能创建成功）即是新的leader，其他replica即为follower。
    问题：
        脑裂
        羊（惊）群效应


kafka 与 rabbitmq区别


kafka 分区怎么同步的

kafka 怎么保证不丢消息的
kafka 为什么可以扛住这么高的qps
kafka partition broker consumer consumer group topic 等都是啥关系？


http各种返回码，401和406啥区别？
    401：未授权
    406：不可接受


redis 哨兵和集群
    哨兵的作用就是监控redis主、从数据库是否正常运行，主出现故障自动将从数据库转换为主数据库。

    即使使用哨兵，redis每个实例也是全量存储，每个redis存储的内容都是完整的数据，浪费内存且有木桶效应。
    为了最大化利用内存，可以采用集群，就是分布式存储。即每台redis存储不同的内容，
    共有16384个slot。每个redis分得一些slot，hash_slot = crc16(key) mod 16384 找到对应slot

一致性hash算法


两个单向链表，返回求和后的链表结构，例如2->3->1->5，和3->6，结果返回2->3->5->1


二面
二面没什么好说的，和面试聊人生去了，我以为是要凉的节奏，但是却拿到了offer。

三面
HR 面


腾讯
腾讯面试提前1天和提前一个小时都会发短信提示。去的腾讯滨海大厦面试，大楼的现代化程度很高，不过需要提醒一下的是，腾讯的滨海大厦分为南塔和北塔。我去的时候就上错楼了，需要下到4楼重新换成电梯。

一面
笔试

微服务的特点，如何实现服务发现和负载均衡


c++内存管理

time_wait在哪一端产生，作用是什么
    当TCP执行主动关闭，并发出最后一个ACK，该链接必须在TIME_WAIT状态下停留的时间为2MSL。
        （1）让TCP再次发送最后的ACK以防这个ACK丢失（被动关闭的一方超时并重发最后的FIN）；保证TCP的可靠的全双工连接的终止。
        （2）允许老的重复分节在网络中消失。参考文章《unix网络编程》
        （3）TCP连接的建立和终止 在TIME_WAIT状态 时两端的端口不能使用，要等到2MSL时间结束才可继续使用。
            当连接处于2MSL等待阶段时任何迟到的报文段都将被丢弃。
            不过在实际应用中可以通过设置 SO_REUSEADDR选项达到不必等待2MSL时间结束再使用此端口。


程序crash如何定位


服务性能问题如何定位
    日志
        oom         https://blog.csdn.net/CharJay_Lin/article/details/89413433 jvm 配置
            -verbose:gc -Xloggc:/usr/webser/logs/jvmgc.log -XX:+HeapDumpOnOutOfMemoryError
            -XX:HeapDumpPath=/usr/webser/logs/error.hprof -XX:+PrintGCApplicationStoppedTime
            -XX:+PrintGCTimeStamps -XX:+PrintCommandLineFlags -XX:+PrintFlagsFinal -XX:+PrintGCDetails -XX:+UseG1GC

        Too many open files
        Connection closed/connection refused
        SQLException
    硬件资源占用：
        CPU
        mem
        磁盘I/O
        网络I/O
    数据库监控
        死锁
        慢查询
    服务监控
        并发量

两个排序数组找中位数


就数字n的平方根
    1. 先找到平方值最接近给定的val的值
    2. 然后二分法，找到right-left < le-7的mid中间值

设计一个算法，抽奖次数越多中奖概率就越高
    https://blog.csdn.net/angaixing0071/article/details/101700305


MySQL 如何分析一条语句的执行过程。delete from t1 limit 3和delete from t1的区别？
    explain sql
    delete limit 删除前n条记录


面试

问项目

跳台阶

数组中奇数个元素

一栋楼有n层，不知道鸡蛋从第几层扔下去会碎，用最少的次数找出刚好会碎的楼层
    x + (x-1) + (x-2) + ... + 1 >= N


动态规划与贪心有什么区别
    动态规划：
        全局最优解
        主要运用二维或三维问题
        动态规划则会根据以前的选择结果对当前进行选择，有回退功能
    贪心：
        局部最优解
        主要是一维问题
        贪心算法对每个子问题的解决方案都做出选择，不能回退


redis数据结构的底层实现
    https://www.cnblogs.com/javazhiyin/p/11063944.html
    string
        Redis自己构建了一种名叫Simple dynamic string(SDS)的数据结构
    list
        Redis的链表在双向链表上扩展了头、尾节点、元素数等属性
    hash
        Redis的Hash，就是在数组+链表的基础上，进行了一些rehash优化等。
    set

    zset


redis如何实现高可用
    主从复制
    哨兵机制


负载均衡算法有哪些
    轮询法
    随机法
    源地址哈希法
    加权轮询法
    加权随机法
    最小连接数法


服务发现是怎么实现的
    https://www.cnblogs.com/kaleidoscope/p/9605958.html
    客户端服务发现模式
    服务端服务发现模式

熔断是怎么实现的
    系统会检测请求失败的比率（失败数/总请求数）， 一旦这个比率达到一个阈值的时候，熔断器就开启， 直接拒绝执行用户请求。
    然后休眠一段时间，尝试放过一部分流量（比如一个请求），如果调用成功，熔断器闭合，恢复到正常状态，否则继续进行休眠周期。

    Netflix推荐大家转向Resilience4j

id生成器怎么实现的，如何实现全局递增
    用redis的INCR
    优化方式：通过定期存储比当前邀请码大一定数值的邀请码到数据库中，在redis宕机情况，读取存储的邀请码，保证邀请码的唯一性


协程和线程的区别
    协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。
    协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，
    直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。

    1) 一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样python中则能使用多核CPU。
    2) 线程进程都是同步机制，而协程则是异步
    3) 协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态


进程间通讯方法
    1.管道：速度慢，容量有限，只有父子进程能通讯
    2.FIFO：任何进程间都能通讯，但速度慢
    3.消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题
    4.信号量：不能传递复杂消息，只能用来同步
    5.共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，
        当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存


线程间通讯方式
    https://blog.csdn.net/jisuanji12306/article/details/86363390
    共享内存    volatile
        使用JUC工具类 CountDownLatch
        使用 ReentrantLock 结合 Condition
        基本LockSupport实现线程间的阻塞和唤醒

    消息传递    使用Object类的wait() 和 notify() 方法
         wait和 notify必须配合synchronized使用，wait方法释放锁，notify方法不释放锁



平时逛哪些论坛，研究哪些算法
paxos算法，这个算法我说不清楚，然后说了raft算法
gdb怎么切换线程

如何判断一个图是否有环
    dfs
    并发集
    拓扑算法


介绍一下缓存


查看 CPU 的命令和磁盘 IO 的命令


二面
项目的系统架构画一下

如果用户量上涨怎么优化

负载均衡的加权轮询算法怎么实现

背包问题

贝叶斯的概率学原理

分词算法

连续整数求和(leetcode 第 829 题)，要求时间复杂度小于O(N)



字节跳动
一面
问项目

任务系统怎么保证任务完成后发奖一定成功


zset 延时队列怎么实现的


redis 数据结构有哪些？分别怎么实现的？


redis 的持久化


mysql 的索引


一个无序数组找其子序列构成的和最大，要求子序列中的元素在原数组中两两都不相邻


二面
Redis 的 ZSET 怎么实现的？ 尽量介绍的全一点，跳跃表加哈希表以及压缩链表


Redis 的 ZSET 做排行榜时，如果要实现分数相同时按时间顺序排序怎么实现？
    说了一个将 score 拆成高 32 位和低 32 位，高 32 位存分数，低 32 位存时间的方法。问还有没有其他方法，想不出了


MySQL 事务的四个隔离级别？ 先说了四个级别的区别，然后说了每个级别可能产生的问题
    https://www.cnblogs.com/xiaohanlin/p/8644749.html
    读未提交  ---  脏读
    读已提交  ---  不可重复读
    可重复读  ---  幻读
    串行化


binlog 日志和 redolog 日志清楚吗？ 说了两个日志的作用以及两阶段提交
    redo log是属于innoDB层面，binlog属于MySQL Server层面的，这样在数据库用别的存储引擎时可以达到一致性的要求。
    redo log是物理日志，记录该数据页更新的内容；binlog是逻辑日志，记录的是这个更新语句的原始逻辑
    redo log是循环写，日志空间大小固定；binlog是追加写，是指一份写到一定大小的时候会更换下一个文件，不会覆盖。
    binlog可以作为恢复数据使用，主从复制搭建，redo log作为异常宕机或者介质故障后的数据恢复使用。

    现如今实现基于两阶段提交的分布式事务也没那么困难了，如果使用Java，那么可以使用开源软件atomikos(http://www.atomikos.com/)来快速实现。


C++ 的动态多态怎么实现的？
C++ 的构造函数可以是虚函数吗？

缺失的第一个正数（leetcode第41题）

linux 系统里，一个被打开的文件可以被另一个进程删除吗？
    https://blog.csdn.net/weiwangchao_/article/details/94578327
    可以


一个 10M 大小的 buffer 里存满了数据，现在要把这个 buffer 里的数据尽量发出去，可以允许部分丢包，问是用TCP好还是UDP好？为什么？
    udp


一个完整的 HTTP 请求会涉及到哪些协议？
    dns
    http
    tcp / udp
    ip



三面
问项目
redis 的 ZSET 是怎么实现的？

让你设计一个限流的系统怎么做？ 令牌桶
    令牌桶 https://www.cnblogs.com/cjsblog/p/9379516.html

    https://blog.csdn.net/dreamvyps/article/details/83964417

    Redis https://blog.csdn.net/Java_pakeng/article/details/101466822?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task


让你设计一个延时任务系统怎么做 说了两个方案，
    一个是使用 redis 的 ZSET 来实现，考虑分片来抗高并发，使用 redis 的持久化来实现落地，使用 redis 的哨兵实现故障转移。
    一个是使用时间轮的方法。
    DelayQueue


现有一个随机数生成器可以生成0到4的数，现在要让你用这个随机数生成器生成0到6的随机数，要保证生成的数概率均匀。
    随机数 * 6/4

有 N 枚棋子，每个人一次可以拿1到 M 个，谁拿完后棋子的数量为0谁就获胜。
现在有1000颗棋子，每次最多拿8个，A 先拿，那么 A 有必胜的拿法吗？
第一个人拿完后剩余棋子的数量是8的倍数就必胜，否则就必输。


给出一棵二叉树的根节点，现在有这个二叉树的部分节点，要求这些节点最近的公共祖先。


四面
HR 面