字节跳动4面核心面试题
https://zhuanlan.zhihu.com/p/109266355


字节跳动4面核心面试题
01 Zookeeper 部分
    https://www.cnblogs.com/lanqiu5ge/p/9405601.html

zookeeper配置管理
    程序分布式的部署在不同的机器上，将程序的配置信息放在zk的znode下，当有配置发生改变时，也就是znode发生变化时，
    可以通过改变zk中某个目录节点的内容，利用watcher通知给各个客户端，从而更改配置。

Zookeeper通知机制
    客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，zookeeper会通知客户端。
        一次触发
        Watches是异步发往客户端的，Zookeeper提供一个顺序保证：在看到watch事件之前绝不会看到变化，这样不同客户端看到的是一致性的顺序。
        为数据设置watch，getData(),getChildren()和exists()都有设置watch的选项。
        时序性和一致性


Zookeeper集群管理
    所谓集群管理无在乎两点：是否有机器退出和加入、选举master。
        对于第一点，所有机器约定在父目录下创建临时目录节点，然后监听父目录节点的子节点变化消息。一旦有机器挂掉，
            该机器与 zookeeper的连接断开，其所创建的临时目录节点被删除，所有其他机器都收到通知：某个兄弟目录被删除，于是，所有人都知道：它上船了。
        新机器加入也是类似，所有机器收到通知：新兄弟目录加入，highcount又有了，
            对于第二点，我们稍微改变一下，所有机器创建临时顺序编号目录节点，每次选取编号最小的机器作为master就好。


Zookeeper分布式锁
    有了zookeeper的一致性文件系统，锁的问题变得容易。锁服务可以分为两类，一个是保持独占，另一个是控制时序。
        对于第一类，我们将zookeeper上的一个znode看作是一把锁，通过createznode的方式来实现。
            所有客户端都去创建 /distribute_lock 节点，最终成功创建的那个客户端也即拥有了这把锁。
            用完删除掉自己创建的distribute_lock 节点就释放出锁。
        对于第二类， /distribute_lock 已经预先存在，所有客户端在它下面创建临时顺序编号目录节点，
            和选master一样，编号最小的获得锁，用完删除，依次方便。


zookeeper是如何选取主leader的？



02 Redis 部分

redis 主从复制如何实现的？
    一、master 复制数据给 slave 的原理如下：
        slave 启动成功之后连接到 master 后会发送一个 sync命令。
        master 接收到这个同步命令之后启动后台的存盘进程，即将内存的数据持久化到 rdb 或 aof。
        持久化完毕之后，master 将整个数据文件传送给 slave。

    二、slave 接收 master 复制过来的数据方式有两种：
    全量复制：
        slave 刚与 master 建立连接的时候，会将接收到的 master 发来的整个数据库文件存盘并加载到内存。
    增量复制：
        slave 已经与 master 建立好连接关系的时候，master 会将收集到的修改数据的命令传送给 slave，slave 执行这些命令，完成同步。而不是再一次重新加载整个数据文件到内存。
        当然，如果 slave 与 master 断开连接，再次重连的时候还是要加载整个数据文件的。

    Redis 的主从复制的缺点
        当 master 需要同步发送到 slave 上的数据量非常大的时候，会存在一定的时延。
        当系统很繁忙或者 slave 机器数量非常多的时候也会使这个问题更加严重。

redis 的集群模式如何实现？
    自动将数据进行分片，每个master上放一部分数据
    提供内置的高可用支持，部分master不可用时，还是可以继续工作的
    支撑N个redis master node，每个master node都可以挂载多个slave node
    高可用，因为每个master都有salve节点，那么如果mater挂掉，redis cluster这套机制，就会自动将某个slave切换成master



redis 的 key 是如何寻址的？
    https://blog.csdn.net/chang384915878/article/details/86749209
    数据分布算法
            hash算法
            一致性hash算法
                用虚拟节点改进


使用 redis 如何设计分布式锁？说一下实现思路？使用 zk 可以吗？如何实现？这两种有什么区别
    https://blog.csdn.net/baidu_26954625/article/details/90612002

    •	redis 分布式锁，其实需要自己不断去尝试获取锁，比较消耗性能。
    •	zk 分布式锁，获取不到锁，注册个监听器即可，不需要不断主动尝试获取锁，性能开销较小。
    另外一点就是，如果是 redis 获取锁的那个客户端 出现 bug 挂了，那么只能等待超时时间之后才能释放锁；而 zk 的话，因为创建的是临时 znode，只要客户端挂了，znode 就没了，此时就自动释放锁。
    redis 分布式锁大家没发现好麻烦吗？遍历上锁，计算时间等等…zk 的分布式锁语义清晰实现简单。
    所以先不分析太多的东西，就说这两点，我个人实践认为 zk 的分布式锁比 redis 的分布式锁牢靠、而且模型简单易用。


知道 redis 的持久化吗？底层如何实现的？有什么优点缺点？


redis 过期策略都有哪些？LRU 算法知道吗？写一下 java 代码实现？


缓存穿透、缓存击穿、缓存雪崩解决方案
    https://www.cnblogs.com/xichji/p/11286443.html
    缓存穿透：key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。
        布隆过滤器
        空结果缓存，设置较短过期时间

    缓存击穿：key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。
        使用互斥锁(mutex key)

    缓存雪崩：当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力。
        考虑用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上
        讲缓存失效时间分散开
        设置过期标志更新缓存


缓存与数据库不一致怎么办
    在从库有数据更新之后，将缓存当中的数据也同时进行更新，即当从库发生了数据更新之后，向缓存发出删除，淘汰这段时间写入的旧数据。


主从数据库不一致如何解决
    忽略
    强制读主
    选择性读主
        在cache里记录哪些记录发生过写请求，来路由读主还是读从


Redis常见的性能问题和解决方案
    (1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件
    (2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次
    (3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内
    (4) 尽量避免在压力很大的主库上增加从库
    (5) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <- Slave1 <- Slave2 <- Slave3…
    这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。


03 Mysql 部分

有哪些数据库优化方面的经验?
    https://www.zhihu.com/question/36431635/answer/381557352
    https://blog.csdn.net/panyuxin_/article/details/80782085
    1. 程序优化，用PrepareedStatement进行增删改查
    2. 程序优化，尽量批量处理，避免逐条处理，减小IO数
    3. 查询结果不要用*来查询所有字段，要明确指明结果字段
    4. 减少多表连接数，尽量少的表进行连接
    5. 表连接时，尽量用主键进行连接或用唯一索引
    6. 表的查询多时，一定建立索引
    7. 根据查询条件，建立索引，如果查询条件不止一个时，使用组合索引
    8. 在查询条件表达式的左侧尽量不要使用函数，否则索引失效
    9. 如果不得不用函数，则建立函数索引
    10. 使用合适的索引，例如时间索引、哈希索引、聚簇索引
    11. 如果有like话，尽量避免%xxx%两侧都有%的条件，单侧%可以使用索引，多侧不可以
    12. 尽量不用数据库，使用缓存
    13. 可以考虑用nosql数据库提高效率
    14. SQL的条件表达式，在Oracle中，是按倒序使用索引的
    15. 如果用DDL改动了数据库表字段，需要重建索引，不然索引失效
    16. SQL尽量不要有多余的空格和换行
    17.使用分布式数据库
    18.合理创建表分区表空间
    19.建立索引时字段不能有null值
    20.使用数据库连接池
    21.条件中与null比较索引无效
    22.表结构改动时索引全部失效


聚集索引和非聚集索引的区别？
    聚集索引和非聚集索引的根本区别：
        1、表记录的排列顺序和与索引的排列顺序是否一致。
        2、聚集索引一个表只有一个，非聚集索引一个表可以存在多个。
        3、聚集索引存储记录是物理上连续存在，非聚集索引是逻辑上的连续。

    聚集索引优点：
        1、以最快的速度缩小查询范围。
        2、以最快的速度进行字段排序。

    聚集索引使用场合：
        1、此列包含有限数目的不同值。
        2、查询的结果返回一个区间的值。
        3、查询的结果返回某值相同的大量结果集。

    非聚集索引优点：
        1、非聚集索引比聚集索引层次多。
        2、添加记录不会引起数据顺序的重组。

    非聚集索引使用场合：
        1、此列包含了大量数目不同的值。
        2、查询的结束返回的是少量的结果集。



mysql 中 myisam 与 innodb 的区别？

mysql 中 varchar 与 char 的区别以及 varchar(50)中的 50 代表的涵义？

MySQL 中 InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？

MySQL 中 InnoDB 引擎的行锁是通过加在什么上完成（或称实现）的？
    InnoDB 行锁是通过给索引上的索引项加锁
        原因是:
            innodb是将primary key index和相关的行数据共同放在B+树的叶节点；
            innodb一定会有一个primary key，secondary index查找的时候，也是通过找到对应的primary，再找对应的数据行；


MySQL 中控制内存分配的全局参数，有哪些？
    https://www.cnblogs.com/zengkefu/p/5685515.html

具体谈一下sql如何优化?


explain是如何解析sql的？
    https://www.cnblogs.com/deverz/p/11066043.html


说一下order by原理
    https://blog.csdn.net/csdn_9527666/article/details/80792466


04 JVM 部分

内存模型以及分区，需要详细到每个区放什么
    https://blog.csdn.net/qiuchaoxi/article/details/79889097

对象创建方法，对象的内存分配，对象的访问定位。
    https://www.cnblogs.com/jimoer/p/8849025.html

GC 收集器有哪些？CMS 收集器与 G1 收集器的特点


Minor GC 与 Full GC 分别在什么时候发生？


JVM 内存分哪几个区，每个区的作用是什么?


如和判断一个对象是否存活?(或者 GC 对象的判定方法)


05 Java 基础部分

HashMap和ConcurrentHashMap区别
    https://www.cnblogs.com/heyonggang/p/9112731.html


jdk1.8/jdk1.7都分别新增了哪些特性？
    https://blog.csdn.net/csdnlijingran/article/details/88855000


面向对象和面向过程的区别
    https://www.cnblogs.com/pylearner/p/10903266.html
    面向过程：
        优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、 Linux/Unix等一般采用面向过程开发，性能是最重要的因素。
　　　　  缺点：没有面向对象易维护、易复用、易扩展
　　面向对象：
　　　　  优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护
　　　　  缺点：性能比面向过程低


什么是字节码?采用字节码的好处是什么?
    https://www.cnblogs.com/lanjianblog/p/10743864.html


Java 应用程序与小程序之间有那些差别
    https://blog.csdn.net/weixin_39940206/article/details/92788915


在一个静态方法内调用一个非静态成员为什么是非法的
    https://www.jianshu.com/p/a5d97c8ca153


在 Java 中定义一个不做事且没有参数的构造方法的作用
    https://www.jianshu.com/p/2185238cc5ac


06 Spring 部分

谈谈对 Spring IoC 的理解？
    https://www.cnblogs.com/Mr-Rocker/p/7721824.html

谈谈对 Spring DI 的理解？


Spring的IOC/AOP的实现
    https://www.cnblogs.com/UncleWang001/p/10642712.html


解释 AOP 模块
    https://blog.csdn.net/huangchongwen/article/details/79900431


介绍一下 Spring 的事务实现方式？
    https://blog.csdn.net/chinacr07/article/details/78817449


在Spring中使用hibernate的方法步骤



Spring 和 Struts 的区别？


谈谈你对 Spring 依赖注入的理解？


Spring AOP 中的织入你怎样理解？


怎么样把某个请求映射到特定的方法上面
    @RequestMapping


谈谈 Spring 对 DAO 的支持
    JdbcTemplate



07 其他部分

高并发系统的限流如何实现？

高并发秒杀系统的设计

如何设计负载均衡？

